# 📚 문서 자동 생성 및 배포
# Phase 2.4: CI/CD 파이프라인

name: 📚 Documentation Auto-Generation

on:
  push:
    branches: [main, master, develop]
    paths:
      - "src/**/*.py"
      - "templates/**/*.html"
      - "config.json"
      - ".github/workflows/docs.yml"

  pull_request:
    branches: [main, master]
    paths:
      - "src/**/*.py"
      - "templates/**/*.html"

  # 수동 트리거 지원
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: "강제 문서 재생성"
        required: false
        default: "false"

jobs:
  # 1단계: 문서 생성 및 검증
  generate-docs:
    name: 📄 Generate Documentation
    runs-on: ubuntu-latest

    outputs:
      docs-changed: ${{ steps.check-changes.outputs.docs-changed }}

    steps:
      - name: 🔽 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # 변경사항 비교를 위해

      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 의존성 설치
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install watchdog  # 자동 업데이터용

      - name: 📊 프로젝트 구조 확인
        run: |
          echo "🏗️ 프로젝트 구조:"
          find . -type f -name "*.py" | head -20
          echo "📁 docs 디렉토리:"
          ls -la docs/ || echo "docs 디렉토리 없음"

      - name: 🔍 코드 품질 검사
        run: |
          echo "🔍 Python 구문 검사..."
          python -m py_compile src/docs/*.py || echo "⚠️ 일부 파일에 구문 오류가 있을 수 있습니다"

          echo "📊 코드 통계:"
          find src/ -name "*.py" -exec wc -l {} + | tail -1

      - name: 📚 문서 생성 실행
        run: |
          echo "📚 API 문서 자동 생성 시작..."
          python -c "
          try:
              from src.docs import generate_all_documentation
              result = generate_all_documentation()
              if result:
                  print('✅ 문서 생성 성공')
                  import json
                  print('📊 결과:', json.dumps(result.get('scan_result', {}).get('statistics', {}), indent=2))
              else:
                  print('❌ 문서 생성 실패')
                  exit(1)
          except Exception as e:
              print(f'❌ 오류: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "

      - name: 📋 생성된 문서 확인
        run: |
          echo "📋 생성된 문서 파일들:"
          find docs/ -type f -name "*.md" -o -name "*.html" -o -name "*.json" | sort

          echo "📊 파일 크기:"
          du -sh docs/* || echo "문서 파일이 없습니다"

      - name: 🔎 문서 품질 검사
        run: |
          echo "🔎 문서 품질 검사..."

          # OpenAPI JSON 유효성 검사
          if [ -f "docs/api/openapi/openapi.json" ]; then
            python -c "import json; json.load(open('docs/api/openapi/openapi.json')); print('✅ OpenAPI JSON 유효')"
          else
            echo "⚠️ OpenAPI JSON 파일을 찾을 수 없습니다"
          fi

          # 마크다운 파일 기본 검사
          for md_file in $(find docs/ -name "*.md"); do
            if [ -s "$md_file" ]; then
              echo "✅ $md_file ($(wc -l < "$md_file") lines)"
            else
              echo "⚠️ $md_file (빈 파일)"
            fi
          done

      - name: 🔄 변경사항 확인
        id: check-changes
        run: |
          if [ -d "docs" ]; then
            git add docs/
            if git diff --cached --quiet; then
              echo "docs-changed=false" >> $GITHUB_OUTPUT
              echo "📝 문서 변경사항 없음"
            else
              echo "docs-changed=true" >> $GITHUB_OUTPUT
              echo "📝 문서 변경사항 감지됨"
              git diff --cached --name-only | head -10
            fi
          else
            echo "docs-changed=false" >> $GITHUB_OUTPUT
            echo "📁 docs 디렉토리 없음"
          fi

      - name: 📤 문서 아티팩트 업로드
        uses: actions/upload-artifact@v3
        with:
          name: generated-docs
          path: |
            docs/
            !docs/**/.gitkeep
          retention-days: 30

  # 2단계: 문서 배포 (main/master 브랜치만)
  deploy-docs:
    name: 🚀 Deploy Documentation
    runs-on: ubuntu-latest
    needs: generate-docs
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.generate-docs.outputs.docs-changed == 'true' }}

    steps:
      - name: 🔽 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 문서 아티팩트 다운로드
        uses: actions/download-artifact@v3
        with:
          name: generated-docs
          path: docs/

      - name: 📝 문서 커밋 및 푸시
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add docs/
          if ! git diff --cached --quiet; then
            git commit -m "📚 자동 문서 업데이트 - $(date '+%Y-%m-%d %H:%M:%S')"
            git push
            echo "✅ 문서 업데이트 완료"
          else
            echo "📝 커밋할 변경사항 없음"
          fi

      - name: 📊 배포 요약
        run: |
          echo "🎉 문서 배포 완료!"
          echo "📊 배포 통계:"
          find docs/ -type f | wc -l | xargs -I {} echo "  파일 수: {} 개"
          du -sh docs/ | xargs -I {} echo "  총 크기: {}"

  # 3단계: 문서 웹사이트 배포 (GitHub Pages)
  deploy-pages:
    name: 🌐 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [generate-docs, deploy-docs]
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.generate-docs.outputs.docs-changed == 'true' }}

    # GitHub Pages 배포 권한
    permissions:
      contents: read
      pages: write
      id-token: write

    # 동시 배포 방지
    concurrency:
      group: "pages"
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 🔽 체크아웃
        uses: actions/checkout@v4

      - name: 📥 문서 아티팩트 다운로드
        uses: actions/download-artifact@v3
        with:
          name: generated-docs
          path: docs/

      - name: 🌐 GitHub Pages 준비
        run: |
          # index.html이 없으면 생성
          if [ ! -f "docs/index.html" ]; then
            echo "🏠 index.html 생성..."
            cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ko">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>📚 이메일 증거 처리 시스템 문서</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
                  h1 { color: #667eea; }
                  .doc-links { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px; }
                  .doc-card { border: 1px solid #e0e6ed; border-radius: 8px; padding: 20px; }
                  .doc-card h3 { margin-top: 0; color: #2d3748; }
                  .doc-card a { color: #667eea; text-decoration: none; }
                  .doc-card a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>📚 이메일 증거 처리 시스템 문서</h1>
              <p>자동 생성된 API 문서 및 가이드입니다.</p>

              <div class="doc-links">
                  <div class="doc-card">
                      <h3>🔌 API 문서</h3>
                      <p><a href="api/references/API_Reference.md">API Reference</a></p>
                      <p><a href="api/references/api_docs.html">HTML API 문서</a></p>
                      <p><a href="api/openapi/openapi.json">OpenAPI 명세</a></p>
                  </div>

                  <div class="doc-card">
                      <h3>📖 개발자 가이드</h3>
                      <p><a href="guides/developer/Developer_Guide.md">개발자 가이드</a></p>
                      <p><a href="guides/developer/architecture_refactoring.md">아키텍처 문서</a></p>
                  </div>

                  <div class="doc-card">
                      <h3>⚙️ 관리자 문서</h3>
                      <p><a href="guides/admin/config_guide.md">설정 가이드</a></p>
                  </div>
              </div>

              <footer style="margin-top: 50px; color: #718096; font-size: 14px;">
                  <p>자동 생성: Phase 2.4 CI/CD 파이프라인</p>
              </footer>
          </body>
          </html>
          EOF
          fi

      - name: ⚙️ Pages 설정
        uses: actions/configure-pages@v3

      - name: 📤 Pages 아티팩트 업로드
        uses: actions/upload-pages-artifact@v2
        with:
          path: "docs"

      - name: 🚀 GitHub Pages 배포
        id: deployment
        uses: actions/deploy-pages@v2
